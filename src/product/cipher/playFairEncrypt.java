/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package product.cipher;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author dilan
 */
public class playFairEncrypt extends javax.swing.JFrame {
    
    private String[] keyArray = new String[25];
    private boolean[] checkLetters = new boolean[26];
    private File file;

    /**
     * Creates new form playFairEncrypt
     */
    public playFairEncrypt() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtKey = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        txtPath = new javax.swing.JTextField();
        btnSelectFile = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();

        fileChooser.setFileFilter(new MyCustomFilter());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setText("PlayFair Encrypt");

        jLabel2.setText("Enter a Ciphering Key");

        txtKey.setToolTipText("Enter the key here");

        jLabel3.setText("Select the text file you want to Encrypt");

        jButton1.setText("Encrypt");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnSelectFile.setText("Select File");
        btnSelectFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectFileActionPerformed(evt);
            }
        });

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(txtKey, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(107, 107, 107))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(txtPath, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSelectFile)
                        .addGap(89, 89, 89))))
            .addGroup(layout.createSequentialGroup()
                .addGap(151, 151, 151)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnBack)
                .addGap(22, 22, 22))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1)
                .addGap(17, 17, 17)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSelectFile))
                .addGap(127, 127, 127)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(btnBack))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    //This Click event will get the text file path and show it in the text field
    private void btnSelectFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectFileActionPerformed

        int returnVal = fileChooser.showOpenDialog(this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = fileChooser.getSelectedFile();
            txtPath.setText(file.getAbsolutePath());
        } 
        else {
            System.out.println("File access cancelled by user.");
        }
        
    }//GEN-LAST:event_btnSelectFileActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        createKey();
        encryptFile(txtPath.getText());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        new PlayFairCipher().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(playFairEncrypt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(playFairEncrypt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(playFairEncrypt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(playFairEncrypt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new playFairEncrypt().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnSelectFile;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField txtKey;
    private javax.swing.JTextField txtPath;
    // End of variables declaration//GEN-END:variables

    private void createKey(){
        String key = txtKey.getText();
        int txtLength = key.length();
        int counter = 0;
        
        //Loop for identify the Characters of the Key Phrase user given
        for(int i = 0; i<txtLength; i++){
            char x = key.charAt(i);
            x = Character.toUpperCase(x);
            
            int y = (int) x;
            
            //Ignoring the characters other than the alphabet
            if(y>64 && y < 91){
                
                if(checkLetters[y-65] == false){
                    checkLetters[y-65] = true;
                    
                    //Putting "I" and "J"  in the same slot
                    if(y == 73 || y == 74){
                        checkLetters[74-65] = true;
                        checkLetters[73-65] = true;
                        keyArray[counter] = "(I/J)";
                    }
                    else{
                        keyArray[counter] = Character.toString(x);
                    }
                    counter ++;
                }
            }
        }
        
        //To fill the remaining letters to the array
        for(int i = 0; i<26;i++){

            if(checkLetters[i]==false){
                //Checking the "I" and "J" letters for 
                if(i == 8 ){
                    keyArray[counter] = "(I/J)";
                }
                else if(i==9){
                    continue;
                }
                else{
                    char temp = (char) ((char) i + 65);
                    keyArray[counter] = Character.toString(temp);
                }
                counter++;
            }
        }
    }
    
    private void encryptFile(String file){
        String textToEncrypt = "";
        String temp;
        String encryptedTextFull = "";
        try {
            FileReader fileReader = new FileReader(file);
            BufferedReader bufferedReader = new BufferedReader(fileReader);
            
            while((temp = bufferedReader.readLine()) != null) {
                textToEncrypt += temp;
            }
            
            bufferedReader.close();
        } 
        catch (FileNotFoundException ex) {
            
            Logger.getLogger(playFairEncrypt.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Unable to open file at'" + file + "'");
        } 
        catch (IOException ex) {
            
            Logger.getLogger(playFairEncrypt.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Error reading file at'" + file + "'");
        }
        
        int txtLength = textToEncrypt.length();
        
        String word = "";
        int charCount = 0;
        for(int k = 0; k< txtLength;k++){
            
            char x = Character.toUpperCase(textToEncrypt.charAt(k));
            if((int) x < 65 || (int) x > 90 ){
                k = charCount;
                charCount++;
                encryptedTextFull+= getString(word.length(),word) + " ";
                word = "";
            }
            else{
                charCount++;
                word = word + Character.toString(x);
            }
        }
        encryptedTextFull+= getString(word.length(),word);
 
        //Writing String data to a Text file
        PrintWriter writer = null;
        try {
            writer = new PrintWriter("encrpytedText.txt", "UTF-8");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(playFairEncrypt.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(playFairEncrypt.class.getName()).log(Level.SEVERE, null, ex);
        }
        writer.println(encryptedTextFull);
        writer.close();
        JOptionPane.showMessageDialog(null, "Successfully Encoded!", "Encryption Info", JOptionPane.INFORMATION_MESSAGE);
    }
    
    private int findPosition(char charVal){
        
        int temp = 26;     
        for(int i = 0;i<25;i++){
            if(keyArray[i].equals(Character.toString(charVal))){
                temp = i;
            }
            else if(Character.toString((char)charVal).equals("I") || Character.toString((char)charVal).equals("J")){
                for(int j = 0 ;j<25;j++){
                    if(keyArray[j].equals("(I/J)")){
                        temp = j;
                    }
                }
            }
            else{
                continue;
            }
        }
        return temp;   
    }
    
    private int findRow(int temp){
        
        if(temp<5 && temp>-1){
            return 0;
        }
        else if( temp >4 && temp <10){
            return 1;
        }
        else if( temp >9 && temp <15){
            return 2;
        }
        else if( temp >14 && temp <20){
            return 3;
        }
        else if( temp >19 && temp <25){
            return 4;
        }
        else{
            return 5;
        }
    }
    
    private int findColumn(int pos, int row){
        
        if(row!=5){
            return pos - row*5;
        }
        else{
            return 5;
        }
        
    }
    
    private String findChar(int row, int col){
        
        if(row == 5 ){
            return Integer.toString(col);
        }
        if ( col == 5){
            return Integer.toString(row);
        }
        
        return keyArray[col + 5*row];
    }
    
    private String getString(int txtLength, String textToEncrypt){
        
        String encryptedText = "";
        
        if(textToEncrypt.length()%2 != 0){
            textToEncrypt+="X";
            txtLength++;
        }
        
        for(int i = 0;i <txtLength;i = i + 2){
            
            char char1 = Character.toUpperCase(textToEncrypt.charAt(i));
            char char2 = Character.toUpperCase(textToEncrypt.charAt(i+1));
            
            int char1ER = 5, char1EC = 5, char2ER = 5, char2EC = 5;
            
            int char1Pos = findPosition(char1);
            int char1Row = findRow(char1Pos);
            int char1Col = findColumn(char1Pos, char1Row);
            
            int char2Pos = findPosition(char2);
            int char2Row = findRow(char2Pos);
            int char2Col = findColumn(char2Pos, char2Row);
            
            
            boolean changed = false;
            
            if(char1Row == char2Row){
                changed = true;
                if(char1Col<4){
                    char1EC = char1Col + 1;
                }
                else if(char1Col==4){
                    char1EC = 0;
                }
                else{
                    char1EC = 5;
                }
                
                if(char2Col<4){
                    char2EC = char2Col + 1;
                }
                else if(char2Col == 4){
                    char2EC = 0;
                }
                else{
                    char2EC = 5;
                }
                char1ER = char1Row;
                char2ER = char2Row;
            }

            
            if(char1Col == char2Col){
                changed = true;
                if(char2Row<4){
                    char2ER = char2Row + 1;
                }
                else if(char2Row==4){
                    char2ER = 0;
                }
                else{
                    char2EC = 5;
                }
                 
                if(char1Row<4){
                    char1ER = char1Row + 1;
                }
                else if(char1Row==4){
                    char2ER = 0;
                }
                else{
                    char2ER = 5;
                }
                
                char1EC = char1Col;
                char2EC = char2Col;
            }
            
            if(changed == false){
                char1ER = char1Row;
                char1EC = char2Col;
                char2ER = char2Row;
                char2EC = char1Col;
            }
            
            encryptedText += findChar(char1ER,char1EC);
            encryptedText += findChar(char2ER,char2EC);
            
        }
        return encryptedText;
    }
}
